// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var EventDispatcher, Layout;
  EventDispatcher = require("../events/helpers/EventDispatcher");
  return Layout = (function(_super) {

    __extends(Layout, _super);

    function Layout() {
      Layout.__super__.constructor.call(this);
      this.size = 0;
      this.nodes = null;
    }

    Layout.prototype.toString = function() {
      return "[object Layout]";
    };

    Layout.prototype.toJSON = function() {
      /*  Serializes the layout data of each node as a JSON string. Includes the 'type', 'size' and 'nodes' properties.
      */

      var i, nodes, _i, _ref;
      for (i = _i = 0, _ref = this.size; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        nodes = this.nodes[i].toObject();
      }
      return {
        type: this.toString(),
        size: this.size,
        nodes: nodes
      };
    };

    Layout.prototype.addToLayout = function(object, moveToCoordinates) {
      throw 'Method must be overriden by child class';
    };

    Layout.prototype.addNode = function(object, moveToCoordinates) {
      throw 'Method must be overriden by child class';
    };

    Layout.prototype.addNodes = function(count) {
      /* Adds a specified number of empty nodes to the layout
      */

      var i, _i, _results;
      _results = [];
      for (i = _i = 0; 0 <= count ? _i < count : _i > count; i = 0 <= count ? ++_i : --_i) {
        _results.push(this.addNode());
      }
      return _results;
    };

    return Layout;

  })(EventDispatcher);
});
