// Generated by CoffeeScript 1.3.3
/*
    Coordinates.js tests with qunit
*/

require(["../src/js/coordinates/coordinates"], function(coordinates) {
  /* helper pour le debugging via console
  */
  window.Coordinates = coordinates;
  test("coordinates is loaded", function() {
    return ok(coordinates !== null, "coordinates is not null");
  });
  module("ES5shims");
  test("capitalize", function() {
    var expectedSentence, testSentence;
    testSentence = "this is a sentence";
    expectedSentence = "This Is A Sentence";
    equal(testSentence.capitalize(), expectedSentence, "capitalize");
    testSentence = "this is a sentence with  spaces";
    expectedSentence = "This Is A Sentence With  Spaces";
    return equal(testSentence.capitalize(), expectedSentence, "capitalize with spaces");
  });
  /* test de chaque m√©thode de chaque classe
  */

  /*
          coordinates.links.DOMLink2d
  */

  module("coordinates.links.DOMLink2d");
  test("coordinates.links.DOMLink2d", function() {
    var domLink2d, el;
    el = document.createElement("DIV");
    el.style.width = "200px";
    el.style.height = "200px";
    el.style.position = "fixed";
    domLink2d = new coordinates.links.DOMLink2d(el);
    ok(domLink2d !== null && domLink2d instanceof coordinates.links.DOMLink2d, "DOMLink2d.constructor");
    domLink2d.x = 200;
    domLink2d.y = 250;
    domLink2d.rotation = 45;
    equal(domLink2d.domElement.style.transform, "translate(200px,250px) rotate(45deg)", "DOMLink2d.applyTransform");
  });
  /*
          coordinates.events.helpers.Event
  */

  module("coordinates.events.helpers.Event");
  test("coordinates.events.helpers.Event", function() {
    var clonedEvent, e;
    e = new coordinates.events.helpers.Event("xevent");
    ok(e !== null, "Event.constructor");
    ok(e.getEventPhase() === 1, "EventPhase.getEventPhase");
    e.setEventPhase(coordinates.events.helpers.EventPhase.BUBBLING_PHASE);
    ok(e.getEventPhase() === 2, "EventPhase.setEventPhase");
    clonedEvent = e.clone();
    return ok(clonedEvent.type === e.type && clonedEvent.bubbles === e.bubbles, "Event.clone");
  });
  module("coordinates.events.helpers.EventDispatcher");
  /*
          coordinates.events.helpers.EventDispatcher
  */

  test("coordinates.events.helpers.EventDispatcher", function() {
    var o;
    expect(3);
    o = new coordinates.events.helpers.EventDispatcher();
    ok(o !== null && o instanceof coordinates.events.helpers.EventDispatcher, "EventDispatcher.constructor");
    ok(o._target === o, "EventDispatcher._target == EventDispatcher");
    o.addEventListener("XEvent", function(e) {
      return ok(e.target === o._target, "EventDispatcher.dispatchEvent fired");
    });
    return o.dispatchEvent(new coordinates.events.helpers.Event("XEvent"));
  });
  module("coordinates.nodes");
  test("coordinates.nodes.Node", function() {
    var link, newLink, node;
    link = {
      x: 1,
      y: 1
    };
    node = new coordinates.nodes.Node(link);
    ok(node.getLink() === link, "Node.getLink");
    newLink = {
      x: 2,
      y: 5
    };
    node.setLink(newLink);
    ok(node.getLink() === newLink, "Node.setLink");
    throws(function() {
      return node.toObject();
    }, "Node.toObject throws an exception");
  });
  module("coordinates.nodes.twodee");
  test("coordinates.nodes.twodee.Node2d", function() {
    var clonedNode, link, node2d, o;
    link = {
      x: 1,
      y: 2
    };
    node2d = new coordinates.nodes.twodee.Node2d(link, 2, 5);
    ok(node2d !== null && node2d instanceof coordinates.nodes.twodee.Node2d, "Node2d.constructor");
    o = node2d.toObject();
    ok(o.x === 2 && o.y === 5, "Node.toObject");
    node2d.setRotation(35);
    clonedNode = node2d.clone();
    ok(clonedNode.getX() === node2d.getX() && clonedNode.getRotation() === node2d.getRotation(), "Node.clone");
    node2d.setJitterX(3);
    node2d.setJitterY(5);
    ok(node2d.getJitterX !== 3 && node2d.getJitterY() !== 5, "Node2d.setJitterX , Node2d.setJitterY");
  });
  /*
          Coordinates.layouts
  */

  module("coordinates.layouts.Layout", {
    setup: function() {
      this.link1 = new Coordinates.Link({
        x: 1,
        y: 2
      });
      this.link2 = new Coordinates.Link({
        x: 3,
        y: 5
      });
      this.node1 = new Coordinates.Node(this.link1);
      this.node2 = new Coordinates.Node(this.link2);
      return this.layout = new Coordinates.Layout();
    },
    teardown: function() {}
  });
  test("constructor", function() {
    equal(this.layout.size, 0);
    return equal(this.layout.nodes.length, 0);
  });
  test("storeNode", function() {
    this.layout.storeNode(this.node1);
    equal(this.layout.size, 1, "Layout.storeNode");
    equal(this.layout.nodes.length, 1, "Layout.storeNode");
    equal(this.layout.linkExists(this.link1), true, "Layout.linkExists");
    equal(this.layout.linkExists(this.link2), false, "Layout.linkExists");
    this.layout.storeNodeAt(this.node2, 0);
    equal(this.layout.nodes[0].getLink(), this.link2, "Layout.storeNodeAt");
    equal(this.layout.getNodeByLink(this.link1), this.node1, "Layout.getNodeByLink");
    equal(this.layout.getNodeIndex(this.node2), 0, "Layout.getNodeIndex");
    equal(this.layout.getNodeAt(0), this.node2, "Layout.getNodeAt");
    this.layout.removeNodeByLink(this.link1);
    equal(this.layout.linkExists(this.link1), false, "layout.removeNodeByLink");
    equal(this.layout.size, 1, "layout.removeNodeByLink");
    equal(this.layout.nodes.length, 1, "layout.removeNodeByLink");
    this.layout.removeAllNodes();
    equal(this.layout.size, 0, "Layout.removeAllNodes");
    return equal(this.layout.nodes.length, 0, "Layout.removeAllNodes");
  });
  test("swapNodeLinks", function() {
    this.layout.storeNode(this.node1);
    this.layout.storeNode(this.node2);
    this.layout.swapNodeLinks(this.node1, this.node2);
    equal(this.node1.getLink(), this.link2);
    return equal(this.node2.getLink(), this.link1);
  });
  return test("addLinkAt", function() {
    this.layout.storeNode(this.node1);
    this.layout.addLinkAt(this.link2, 0);
    return equal(this.layout.nodes[0].getLink(), this.link2, "Layout.addLinkAt");
  });
});
