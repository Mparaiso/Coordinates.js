// Generated by CoffeeScript 1.3.3
/*
    Coordinates.js tests with qunit
*/

/* load a script according to its path , then execute a callback
*/

var loadScript, requireloaded;

loadScript = function(scriptPath, callback, options, callbackoptions) {
  var option, s, values, _i, _len,
    _this = this;
  if (options == null) {
    options = {};
  }
  if (callbackoptions == null) {
    callbackoptions = {};
  }
  s = document.createElement("SCRIPT");
  for (values = _i = 0, _len = options.length; _i < _len; values = ++_i) {
    option = options[values];
    s.option = value;
  }
  s.onload = function(e) {
    return callback(e, callbackoptions);
  };
  s.src = scriptPath;
  document.body.appendChild(s);
  return s;
};

/* callback
*/


requireloaded = function(event) {
  console.log("requireloaded", arguments);
  return require(["../src/js/coordinates/coordinates"], function(coordinates) {
    console.log("coordinates loaded", arguments);
    /* helper pour le debugging via console
    */

    window.Coordinates = coordinates;
    test("coordinates is loaded", function() {
      return ok(coordinates !== null, "coordinates is not null");
    });
    /* test de chaque mÃ©thode de chaque classe
    */

    /*
                coordinates.links.DOMLink2d
    */

    module("coordinates.links.DOMLink2d");
    test("coordinates.links.DOMLink2d", function() {
      var domLink2d, el;
      el = document.createElement("DIV");
      el.style.width = "200px";
      el.style.height = "200px";
      el.style.position = "fixed";
      domLink2d = new coordinates.links.DOMLink2d(el);
      ok(domLink2d !== null && domLink2d instanceof coordinates.links.DOMLink2d, "DOMLink2d.constructor");
      domLink2d.x = 200;
      domLink2d.y = 250;
      domLink2d.rotation = 45;
      equal(domLink2d.domElement.style.transform, "translate(200px,250px) rotate(45deg)", "DOMLink2d.applyTransform");
    });
    /*
                coordinates.events.helpers.Event
    */

    module("coordinates.events.helpers.Event");
    test("coordinates.events.helpers.Event", function() {
      var clonedEvent, e;
      e = new coordinates.events.helpers.Event("xevent");
      ok(e !== null, "Event.constructor");
      ok(e.getEventPhase() === 1, "EventPhase.getEventPhase");
      e.setEventPhase(coordinates.events.helpers.EventPhase.BUBBLING_PHASE);
      ok(e.getEventPhase() === 2, "EventPhase.setEventPhase");
      clonedEvent = e.clone();
      return ok(clonedEvent.type === e.type && clonedEvent.bubbles === e.bubbles, "Event.clone");
    });
    module("coordinates.events.helpers.EventDispatcher");
    /*
                coordinates.events.helpers.EventDispatcher
    */

    test("coordinates.events.helpers.EventDispatcher", function() {
      var o;
      expect(3);
      o = new coordinates.events.helpers.EventDispatcher();
      ok(o !== null && o instanceof coordinates.events.helpers.EventDispatcher, "EventDispatcher.constructor");
      ok(o._target === o, "EventDispatcher._target == EventDispatcher");
      o.addEventListener("XEvent", function(e) {
        return ok(e.target === o._target, "EventDispatcher.dispatchEvent fired");
      });
      return o.dispatchEvent(new coordinates.events.helpers.Event("XEvent"));
    });
    module("coordinates.nodes");
    test("coordinates.nodes.Node", function() {
      var link, newLink, node;
      link = {
        x: 1,
        y: 1
      };
      node = new coordinates.nodes.Node(link);
      ok(node.getLink() === link, "Node.getLink");
      newLink = {
        x: 2,
        y: 5
      };
      node.setLink(newLink);
      ok(node.getLink() === newLink, "Node.setLink");
      throws(function() {
        return node.toObject();
      }, "Node.toObject throws an exception");
    });
    module("coordinates.nodes.twodee");
    return test("coordinates.nodes.twodee.Node2d", function() {
      var clonedNode, link, node2d, o;
      link = {
        x: 1,
        y: 2
      };
      node2d = new coordinates.nodes.twodee.Node2d(link, 2, 5);
      ok(node2d !== null && node2d instanceof coordinates.nodes.twodee.Node2d, "Node2d.constructor");
      o = node2d.toObject();
      ok(o.x === 2 && o.y === 5, "Node.toObject");
      node2d.setRotation(35);
      clonedNode = node2d.clone();
      ok(clonedNode.getX() === node2d.getX() && clonedNode.getRotation() === node2d.getRotation(), "Node.clone");
      node2d.setJitterX(3);
      node2d.setJitterY(5);
      ok(node2d.getJitterX !== 3 && node2d.getJitterY() !== 5, "Node2d.setJitterX , Node2d.setJitterY");
    });
  });
};

loadScript("../src/js/vendor/require.min.js", requireloaded);
