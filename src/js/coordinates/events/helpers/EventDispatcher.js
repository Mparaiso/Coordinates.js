// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var BaseClass, EventDispatcher, EventPhase, Listener, sIDs;
  EventPhase = require("./EventPhase");
  BaseClass = require("../../utils/BaseClass");
  sIDs = 1;
  Listener = (function() {

    function Listener(mListner, mUseCapture, mPriority) {
      this.mListner = mListner;
      this.mUseCapture = mUseCapture;
      this.mPriority = mPriority;
      this.mID = sIDs++;
    }

    Listener.prototype.Is = function(inListener, inCapture) {
      return this.mListner === inListener && this.mUseCapture === inCapture;
    };

    Listener.prototype.dispatchEvent = function(event) {
      return this.mListner(event);
    };

    return Listener;

  })();
  return EventDispatcher = (function(_super) {

    __extends(EventDispatcher, _super);

    function EventDispatcher(_target) {
      this._target = _target != null ? _target : this;
      this._eventMap = [];
    }

    EventDispatcher.prototype._getList = function(type) {
      return this._eventMap[type];
    };

    EventDispatcher.prototype._setList = function(type, list) {
      return this._eventMap[type] = list;
    };

    EventDispatcher.prototype._existList = function(type) {
      return this._eventMap[type] != null;
    };

    EventDispatcher.prototype._compareListeners = function(l1, l2) {
      if (l1.mPriority === l2.mPriority) {
        return 0;
      } else {
        if (l1.mPriority > l2.mPriority) {
          return -1;
        } else {
          return 1;
        }
      }
    };

    EventDispatcher.prototype.addEventListener = function(type, inListener, capture, priority, useWeakReference) {
      var list;
      if (capture == null) {
        capture = false;
      }
      if (priority == null) {
        priority = 0;
      }
      if (useWeakReference == null) {
        useWeakReference = false;
      }
      list = this._getList(type);
      if (!this._existList(type)) {
        list = [];
        this._setList(type, list);
      }
      list.push(new Listener(inListener, capture, priority));
      list.sort(this._compareListeners);
    };

    EventDispatcher.prototype.dispatchEvent = function(event) {
      var capture, idx, list, listener;
      if (!event.target) {
        event.target = this._target;
      }
      capture = event.eventPhase === EventPhase.CAPTURING_PHASE;
      if (this._existList(event.type)) {
        list = this._getList(event.type);
        idx = 0;
        while (idx < list.length) {
          listener = list[idx];
          if (listener.mUseCapture === capture) {
            listener.dispatchEvent(event);
            if (event._isCancelledNow === true) {
              return true;
            }
          }
          /* Detect if the just used event listener was removed...
          */

          if (idx < list.length && listener !== list[idx]) {
            /* do not advance to next item because it looks like one was just removed
            */

          } else {
            idx++;
          }
        }
        return true;
      } else {
        return false;
      }
    };

    EventDispatcher.prototype.hasEventListener = function(type) {
      return this._existList(type);
    };

    EventDispatcher.prototype.removeEventListener = function(type, listener, capture) {
      var i, list, _i, _ref;
      if (capture == null) {
        capture = false;
      }
      if (!this._existList(type)) {
        return;
      }
      list = this._getList(type);
      for (i = _i = 0, _ref = list.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (list[i].Is(type, listener)) {
          list.splice(i, 1);
          return;
        }
      }
    };

    EventDispatcher.prototype.toString = function() {
      return "[object EventDispatcher]";
    };

    EventDispatcher.prototype.willTrigger = function(type) {
      return this.hasEventListener(type);
    };

    return EventDispatcher;

  })(BaseClass);
});
