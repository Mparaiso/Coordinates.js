// Generated by CoffeeScript 1.3.3
/*
    Coordinates.js tests with qunit
*/

var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

require(["../src/js/coordinates/coordinates"], function(coordinates) {
  /* helper pour le debugging via console
  */
  window.Coordinates = coordinates;
  test("coordinates is loaded", function() {
    return ok(coordinates !== null, "coordinates is not null");
  });
  module("ES5shims", {
    setup: function() {
      this.MyClass = (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          _Class.__super__.constructor.call(this);
          this.initConfig({
            x: 1,
            y: 2,
            z: 3
          });
        }

        _Class.prototype.getX = function() {
          return this._x * 2;
        };

        _Class.prototype.setZ = function(v) {
          return this._z = v / 2;
        };

        return _Class;

      })(Coordinates.BaseClass);
      window.MyClass = this.MyClass;
      this.MySuperClass = (function(_super) {

        __extends(_Class, _super);

        function _Class() {
          _Class.__super__.constructor.call(this);
          this.initConfig({
            a: 1,
            b: 2,
            c: 3
          });
        }

        return _Class;

      })(this.MyClass);
      return window.MySuperClass = this.MySuperClass;
    },
    teardown: function() {}
  });
  test("capitalize", function() {
    var expectedSentence, testSentence;
    testSentence = "this is a sentence";
    expectedSentence = "This Is A Sentence";
    equal(testSentence.capitalize(), expectedSentence, "capitalize");
    testSentence = "this is a sentence with  spaces";
    expectedSentence = "This Is A Sentence With  Spaces";
    return equal(testSentence.capitalize(), expectedSentence, "capitalize with spaces");
  });
  test("BaseClass", function() {
    var myClass, mySuperClass;
    myClass = new this.MyClass();
    equal(myClass.getX(), 2, "BaseClass.initConfig");
    myClass.setZ(10);
    equal(myClass.getZ(), 5, "BaseClass.initConfig");
    mySuperClass = new this.MySuperClass();
    equal(mySuperClass.getY(), 2, "BaseClass.constructor");
    return equal(mySuperClass.getA(), 1, "BaseClass.constructor");
    /* test inheritance
    */

  });
  /* test de chaque m√©thode de chaque classe
  */

  /*
          coordinates.links.DOMLink2d
  */

  module("coordinates.links.DOMLink2d");
  test("coordinates.links.DOMLink2d", function() {
    var domLink2d, el;
    el = document.createElement("DIV");
    el.style.width = "200px";
    el.style.height = "200px";
    el.style.position = "fixed";
    ok(true);
    domLink2d = new coordinates.DOMLink2d(el);
    ok(domLink2d !== null && domLink2d instanceof coordinates.links.DOMLink2d, "DOMLink2d.constructor");
    domLink2d.setX(200);
    domLink2d.setY(250);
    domLink2d.setRotation(45);
    equal(domLink2d.getElement().style.transform, "translate(200px,250px) rotate(45deg)", "DOMLink2d.applyTransform");
  });
  /*
          coordinates.events.helpers.Event
  */

  module("coordinates.events.helpers.Event");
  test("coordinates.events.helpers.Event", function() {
    var clonedEvent, e;
    e = new coordinates.events.helpers.Event("xevent");
    ok(e !== null, "Event.constructor");
    ok(e.getEventPhase() === 1, "EventPhase.getEventPhase");
    e.setEventPhase(coordinates.events.helpers.EventPhase.BUBBLING_PHASE);
    ok(e.getEventPhase() === 2, "EventPhase.setEventPhase");
    clonedEvent = e.clone();
    return ok(clonedEvent.type === e.type && clonedEvent.bubbles === e.bubbles, "Event.clone");
  });
  module("coordinates.events.helpers.EventDispatcher");
  /*
          coordinates.events.helpers.EventDispatcher
  */

  test("coordinates.events.helpers.EventDispatcher", function() {
    var o;
    expect(3);
    o = new coordinates.events.helpers.EventDispatcher();
    ok(o !== null && o instanceof coordinates.events.helpers.EventDispatcher, "EventDispatcher.constructor");
    ok(o._target === o, "EventDispatcher._target == EventDispatcher");
    o.addEventListener("XEvent", function(e) {
      return ok(e.target === o._target, "EventDispatcher.dispatchEvent fired");
    });
    return o.dispatchEvent(new coordinates.events.helpers.Event("XEvent"));
  });
  module("coordinates.nodes");
  test("coordinates.nodes.Node", function() {
    var link, newLink, node;
    link = {
      x: 1,
      y: 1
    };
    node = new coordinates.nodes.Node(link);
    ok(node.getLink() === link, "Node.getLink");
    newLink = {
      x: 2,
      y: 5
    };
    node.setLink(newLink);
    ok(node.getLink() === newLink, "Node.setLink");
    throws(function() {
      return node.toObject();
    }, "Node.toObject throws an exception");
  });
  module("coordinates.nodes.twodee");
  test("coordinates.nodes.twodee.Node2d", function() {
    var clonedNode, link, node2d, o;
    link = {
      x: 1,
      y: 2
    };
    node2d = new coordinates.nodes.twodee.Node2d(link, 2, 5);
    ok(node2d !== null && node2d instanceof coordinates.nodes.twodee.Node2d, "Node2d.constructor");
    o = node2d.toObject();
    ok(o.x === 2 && o.y === 5, "Node.toObject");
    node2d.setRotation(35);
    clonedNode = node2d.clone();
    ok(clonedNode.getX() === node2d.getX() && clonedNode.getRotation() === node2d.getRotation(), "Node.clone");
    node2d.setJitterX(3);
    node2d.setJitterY(5);
    ok(node2d.getJitterX !== 3 && node2d.getJitterY() !== 5, "Node2d.setJitterX , Node2d.setJitterY");
  });
  /*
          Coordinates.layouts
  */

  module("coordinates.layouts.Layout", {
    setup: function() {
      this.link1 = new Coordinates.Link({
        x: 1,
        y: 2
      });
      this.link2 = new Coordinates.Link({
        x: 3,
        y: 5
      });
      this.node1 = new Coordinates.Node(this.link1);
      this.node2 = new Coordinates.Node(this.link2);
      return this.layout = new Coordinates.Layout();
    },
    teardown: function() {}
  });
  test("constructor", function() {
    equal(this.layout.size, 0);
    return equal(this.layout.nodes.length, 0);
  });
  test("storeNode", function() {
    this.layout.storeNode(this.node1);
    equal(this.layout.size, 1, "Layout.storeNode");
    equal(this.layout.nodes.length, 1, "Layout.storeNode");
    equal(this.layout.linkExists(this.link1), true, "Layout.linkExists");
    equal(this.layout.linkExists(this.link2), false, "Layout.linkExists");
    this.layout.storeNodeAt(this.node2, 0);
    equal(this.layout.nodes[0].getLink(), this.link2, "Layout.storeNodeAt");
    equal(this.layout.getNodeByLink(this.link1), this.node1, "Layout.getNodeByLink");
    equal(this.layout.getNodeIndex(this.node2), 0, "Layout.getNodeIndex");
    equal(this.layout.getNodeAt(0), this.node2, "Layout.getNodeAt");
    this.layout.removeNodeByLink(this.link1);
    equal(this.layout.linkExists(this.link1), false, "layout.removeNodeByLink");
    equal(this.layout.size, 1, "layout.removeNodeByLink");
    equal(this.layout.nodes.length, 1, "layout.removeNodeByLink");
    this.layout.removeAllNodes();
    equal(this.layout.size, 0, "Layout.removeAllNodes");
    return equal(this.layout.nodes.length, 0, "Layout.removeAllNodes");
  });
  test("swapNodeLinks", function() {
    this.layout.storeNode(this.node1);
    this.layout.storeNode(this.node2);
    this.layout.swapNodeLinks(this.node1, this.node2);
    equal(this.node1.getLink(), this.link2);
    return equal(this.node2.getLink(), this.link1);
  });
  test("addLinkAt", function() {
    this.layout.storeNode(this.node1);
    this.layout.addLinkAt(this.link2, 0);
    return equal(this.layout.nodes[0].getLink(), this.link2, "Layout.addLinkAt");
  });
  module("coordinates.VerticalLine", {
    setup: function() {
      this.l1 = new coordinates.Link({}, 0, 0, 0, 100, 100);
      this.l2 = new coordinates.Link({}, 0, 0, 0, 100, 100);
      this.l3 = new coordinates.Link({}, 0, 0, 0, 100, 100);
      this.l4 = new coordinates.Link({}, 0, 0, 0, 100, 100);
      return this.vl = new coordinates.VerticalLine(20, 0, 0, 0, 0);
    }
  });
  test("constructor", function() {
    return ok(this.vl !== null);
  });
  test("addNode", function() {
    this.vl.addNode(this.l1);
    this.vl.addNode(this.l2);
    this.vl.addNode(this.l3);
    equal(this.vl.size, 3, "VerticalLine.size");
    this.vl.addNode(this.l4);
    equal(this.vl.size, 4, "VerticalLine.size");
    equal(this.vl.nodes.length, 4, "VerticalLine.size");
    equal(this.l1.getY(), 0);
    equal(this.l2.getY(), 120);
    equal(this.l3.getY(), 240);
    return equal(this.l4.getY(), 360);
  });
  test("addNodes", function() {
    expect(8);
    this.vl.addEventListener(coordinates.NodeEvent.prototype.ADD, function() {
      return ok(true, "ADD event dispatched");
    });
    this.vl.addNodes([this.l1, this.l2, this.l3, this.l4]);
    equal(this.l1.getY(), 0, "Node updated and rendered");
    equal(this.l2.getY(), 120, "Node updated and rendered");
    equal(this.l3.getY(), 240, "Node updated and rendered");
    return equal(this.l4.getY(), 360, "Node updated and rendered");
  });
  module("coordinates.HorizontalLine", {
    setup: function() {},
    teadown: function() {}
  });
  module("coordinates.Ellipse", {
    setup: function() {
      return this.ellipse = new coordinates.Ellipse(100, 100);
    }
  });
  test("constructor", function() {
    expect(2);
    equal(this.ellipse.getWidth(), 100, "Ellipse.getWidth");
    return equal(this.ellipse.getHeight(), 100, "Ellipse.getHeight");
  });
  module("coordinates.Wave", {
    setup: function() {
      this.wave = new coordinates.Wave(500, 300);
      this.wave.addNode(new coordinates.Link({}));
      this.wave.addNode(new coordinates.Link({}));
      return this.wave.addNode(new coordinates.Link({}));
    }
  });
  test("constructor", function() {
    expect(4);
    equal(this.wave.getWidth(), 500, "Wave.getWidth");
    equal(this.wave.getHeight(), 300, "Wave.getHeight");
    this.wave.setX(50);
    equal(this.wave.getX(), 50, "Wave.setX");
    this.wave.setY(100);
    return equal(this.wave.getY(), 100, "Wave.setY");
  });
  module("coordinates.Stack", {
    setup: function() {
      this.stack = new coordinates.Stack();
      this.stack.addNode(new coordinates.Link({}));
      this.stack.addNode(new coordinates.Link({}));
      this.stack.addNode(new coordinates.Link({}));
      return this.stack.addNode(new coordinates.Link({}));
    }
  });
  test("constructor", function() {
    equal(this.stack.size, 4, "Stack.size");
    equal(this.stack.nodes.length, 4, "Stack.size");
    equal(this.stack.nodes[0].getOrder(), 0, "Node orders");
    equal(this.stack.nodes[1].getOrder(), 1, "Node orders");
    equal(this.stack.nodes[2].getOrder(), 2, "Node orders");
    return equal(this.stack.nodes[3].getOrder(), 3, "Node orders");
  });
  module("coordinates.Spiral", {
    setup: function() {
      this.spiral = new coordinates.Spiral(300);
      this.spiral.addNode(new coordinates.Link({}));
      this.spiral.addNode(new coordinates.Link({}));
      this.spiral.addNode(new coordinates.Link({}));
      return this.spiral.addNode(new coordinates.Link({}));
    }
  });
  test("constructor", function() {
    equal(this.spiral.size, 4, "Spiral.size");
    equal(this.spiral.nodes.length, 4, "Spiral.size");
    equal(this.spiral.toString(), "[object Spiral]", "Spiral.toString");
    equal(this.spiral.nodes[0].getX(), 300);
    return equal(this.spiral.nodes[0].getY(), 0);
  });
  module("coordinates.Grid", {
    setup: function() {
      var i, _i, _results;
      this.grid = new coordinates.Grid(500, 500, 5, 5);
      _results = [];
      for (i = _i = 0; _i <= 25; i = ++_i) {
        _results.push(this.grid.addNode(new coordinates.Link({})));
      }
      return _results;
    }
  });
  test("constructor", function() {
    return ok(true);
  });
  module("coordinates.Scatter", {
    setup: function() {
      this.scatter = new coordinates.Scatter(500, 500);
      this.scatter.addNode(new coordinates.Link({}));
      this.scatter.addNode(new coordinates.Link({}));
      this.scatter.addNode(new coordinates.Link({}));
      return this.scatter.addNode(new coordinates.Link({}));
    }
  });
  test("constructor", function() {
    equal(this.scatter.toString(), "[object Scatter]", 'Scatter.constructor');
    equal(this.scatter.getWidth(), 500);
    equal(this.scatter.getHeight(), 500);
    return equal(this.scatter.getX(), 0);
  });
  module("coordinates.Flow", {
    setup: function() {
      this.flow = new Coordinates.Flow(500, 500);
      this.flow.addNode(new coordinates.Link({
        width: 200,
        height: 100
      }));
      this.flow.addNode(new coordinates.Link({
        width: 500,
        height: 200
      }));
      this.flow.addNode(new coordinates.Link({
        width: 200,
        height: 500
      }));
      return this.flow.addNode(new coordinates.Link({
        width: 100,
        height: 100
      }));
    }
  });
  test("constructor", function() {
    equal(this.flow.getWidth(), 500);
    equal(this.flow.getHeight(), 500);
    return equal(this.flow.size, 4);
  });
  module("coordinates.Lattice", {
    setup: function() {
      var i, _i, _results;
      this.lattice = new Coordinates.Lattice(500, 500, 0, 0, 3, 3);
      _results = [];
      for (i = _i = 0; _i < 9; i = ++_i) {
        _results.push(this.lattice.addNode(new coordinates.Link({
          width: 30,
          height: 30
        })));
      }
      return _results;
    }
  });
  return test("constructor", function() {
    equal(this.lattice.getWidth(), 500);
    equal(this.lattice.getHeight(), 500);
    return equal(this.lattice.size, 9);
  });
});
